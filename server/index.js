const Telegraf = require("telegraf");
const session = require("telegraf/session");
const Stage = require("telegraf/stage");
const { leave } = Stage;

const Koa = require("koa");
const app = new Koa();

const path = require("path");
const fs = require("fs");
const axios = require("axios");
const moment = require("moment");
const { sleep, getTablesForReservation, createOrder } = require("./utils");
const { token } = require("./config");
const config = require("./config");
const { appId, appSecret } = config.poster;

// *** Scene registration ***
const stage = new Stage();

const scenes = fs.readdirSync(path.join(__dirname, "scenes")).sort();

scenes.forEach(sceneName => stage.register(require(`./scenes/${sceneName}`)));

// *** Bot init ***
const bot = new Telegraf(token[process.env.NODE_ENV]);

bot.use(session());
bot.use(stage.middleware());

bot.start(async ctx => {
  await ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${ctx.chat.first_name}!`);
  await sleep(2000);

  await ctx.reply(
    "–ú–µ–Ω—è –∑–æ–≤—É—Ç –°–æ–∫—Ä–∞—Ç –∏ —è –º–æ–≥—É –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –ª–∞–Ω—á –≤ –º–æ–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏–∏."
  );

  await ctx.scene.enter("selectTime");
});

// For all non-supportet phases
bot.on("text", ctx => {
  ctx.reply(
    `–ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è–ª. –Ø —Ä–∞–∑–±–∏—Ä–∞—é—Å—å —Ç–æ–ª—å–∫–æ –≤ –ª–∞–Ω—á–∞—Ö, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –¥–ª—è –º–µ–Ω—è —Ç–µ–º–Ω—ã–π –ª–µ—Å üå≤`
  );
});

// Payment Responses
bot.on("pre_checkout_query", async ctx => {
  const lunchTime = ctx.update.pre_checkout_query.invoice_payload;

  if (lunchTime) {
    const hour = parseInt(lunchTime);
    const minute = +lunchTime.slice(3);

    if (
      moment()
        .hour(hour)
        .minute(minute)
        .isBefore(moment())
    ) {
      answerPreCheckoutQuery(false, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è!");
    } else {
      // Get free tables
      const res = await getTablesForReservation(lunchTime);

      if (res.length) {
        ctx.answerPreCheckoutQuery(true);
      } else {
        ctx.answerPreCheckoutQuery(
          false,
          "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Å–µ —Å—Ç–æ–ª—ã –∑–∞–Ω—è—Ç—ã –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è!"
        );
      }
    }
  }
});

bot.on("successful_payment", async ctx => {
  const lunchTime = ctx.update.message.successful_payment.invoice_payload;

  if (lunchTime) {
    const res = await createOrder(lunchTime);

    ctx.reply(
      `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–í—Ä–µ–º—è –ª–∞–Ω—á–∞: <b>${lunchTime}</b>\n–ù–æ–º–µ—Ä —Å—Ç–æ–ª–∏–∫–∞: <b>${
        res.table_id
      }</b>`,
      {
        parse_mode: "HTML"
      }
    );
  }
});

bot.startPolling();

app.listen(config.port);
